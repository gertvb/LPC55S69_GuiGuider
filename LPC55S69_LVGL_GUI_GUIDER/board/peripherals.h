/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_dma.h"
#include "fsl_common.h"
#include "fsl_spi.h"
#include "fsl_spi_dma.h"
#include "fsl_pint.h"
#include "fsl_utick.h"
#include "fsl_gpio.h"
#include "fsl_ctimer.h"
#include "fsl_clock.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* Used DMA device. */
#define DMA0_DMA_BASEADDR DMA0
/* DMA0 interrupt vector ID (number). */
#define DMA0_IRQN DMA0_IRQn

  /* Channel CH0 definitions */
/* Selected DMA channel number. */
#define DMA0_CH0_DMA_CHANNEL 0
/* BOARD_InitPeripherals defines for FLEXCOMM8 */
/* Definition of peripheral ID */
#define FLEXCOMM8_PERIPHERAL ((SPI_Type *)FLEXCOMM8)
/* Definition of the clock source frequency */
#define FLEXCOMM8_CLOCK_SOURCE 50000000UL
/* Selected DMA channel number. */
#define FLEXCOMM8_RX_DMA_CHANNEL 2
/* Used DMA device. */
#define FLEXCOMM8_RX_DMA_BASEADDR DMA0
/* Selected DMA channel number. */
#define FLEXCOMM8_TX_DMA_CHANNEL 3
/* Used DMA device. */
#define FLEXCOMM8_TX_DMA_BASEADDR DMA0
/* BOARD_InitPeripherals defines for PINT */
/* Definition of peripheral ID */
#define PINT_PERIPHERAL ((PINT_Type *) PINT_BASE)
/* PINT interrupt vector ID (number). */
#define PINT_PINT_0_IRQN PIN_INT0_IRQn
/* PINT interrupt vector ID (number). */
#define PINT_PINT_1_IRQN PIN_INT1_IRQn
/* PINT interrupt vector ID (number). */
#define PINT_PINT_2_IRQN PIN_INT2_IRQn
/* PINT interrupt vector ID (number). */
#define PINT_PINT_3_IRQN PIN_INT3_IRQn
/* Definition of PINT interrupt ID for interrupt 0  */
#define PINT_INT_0 kPINT_PinInt0
/* Definition of PINT interrupt ID for interrupt 1  */
#define PINT_INT_1 kPINT_PinInt1
/* Definition of PINT interrupt ID for interrupt 2  */
#define PINT_INT_2 kPINT_PinInt2
/* Definition of PINT interrupt ID for interrupt 3  */
#define PINT_INT_3 kPINT_PinInt3
/* BOARD_InitPeripherals defines for UTICK0 */
/* Definition of peripheral ID */
#define UTICK0_PERIPHERAL UTICK0
/* Definition of kUTICK_Onetime operational mode */
#define UTICK0_MODE kUTICK_Onetime
/* Timer tick frequency in Hz (input frequency of the timer) */
#define UTICK0_TICK_FREQ 1000000UL
/* Timer tick period in ns (input period of the timer) */
#define UTICK0_TICK_PERIOD 1000UL
/* Definition of timer value in ticks */
#define UTICK0_TICKS 249999UL
/* UTICK0 interrupt vector ID (number). */
#define UTICK0_IRQN UTICK0_IRQn
/* Definition of peripheral ID */
#define GPIO_GPIO GPIO
/* Definition of peripheral ID */
#define CTIMER3_PERIPHERAL CTIMER3
/* Timer tick frequency in Hz (input frequency of the timer) */
#define CTIMER3_TICK_FREQ 150000000UL
/* Timer tick period in ns (input period of the timer) */
#define CTIMER3_TICK_PERIOD 7UL
/* Definition of PWM period channel. */
#define CTIMER3_PWM_PERIOD_CH kCTIMER_Match_0
/* Definition of PWM period */
#define CTIMER3_PWM_PERIOD 149999
/* Definition of channel 2 ID */
#define CTIMER3_PWM_0_CHANNEL kCTIMER_Match_2
/* Definition of channel 2 duty */
#define CTIMER3_PWM_0_DUTY 131250
/* Definition of peripheral ID */
#define CTIMER0_PERIPHERAL CTIMER0
/* Timer tick frequency in Hz (input frequency of the timer) */
#define CTIMER0_TICK_FREQ 1000000UL
/* Timer tick period in ns (input period of the timer) */
#define CTIMER0_TICK_PERIOD 1000UL
/* Definition of PWM period channel. */
#define CTIMER0_PWM_PERIOD_CH kCTIMER_Match_0
/* Definition of channel 0 ID */
#define CTIMER0_MATCH_0_CHANNEL kCTIMER_Match_0
/* CTIMER0 interrupt vector ID (number). */
#define CTIMER0_TIMER_IRQN CTIMER0_IRQn

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern dma_handle_t DMA0_CH0_Handle;
extern const spi_master_config_t FLEXCOMM8_config;
extern dma_handle_t FLEXCOMM8_RX_Handle;
extern dma_handle_t FLEXCOMM8_TX_Handle;
extern spi_dma_handle_t FLEXCOMM8_DMA_Handle;
extern const ctimer_config_t CTIMER3_config;
extern const ctimer_config_t CTIMER0_config;
extern const ctimer_match_config_t CTIMER0_Match_0_config;

/***********************************************************************************************************************
 * Callback functions
 **********************************************************************************************************************/
/* SPI DMA callback function for the FLEXCOMM8 component (init. function BOARD_InitPeripherals)*/
extern void FLEXCOMM8_SPI_Transfer_Complete(SPI_Type *,spi_dma_handle_t *,status_t ,void *);
/* INT_0 callback function for the PINT component */
extern void Rotary_Encoder_A_Rising(pint_pin_int_t pintr ,uint32_t pmatch_status);
/* INT_1 callback function for the PINT component */
extern void Rotary_Encoder_A_Falling(pint_pin_int_t pintr ,uint32_t pmatch_status);
/* INT_2 callback function for the PINT component */
extern void Rotary_Encoder_B_Rising(pint_pin_int_t pintr ,uint32_t pmatch_status);
/* INT_3 callback function for the PINT component */
extern void Rotary_Encoder_B_Falling(pint_pin_int_t pintr ,uint32_t pmatch_status);
/* UTICK0 callback function */
extern void UTICK0_Callback(void);
  /* Single callback function declaration */
extern void CTimer0_1ms_Callback(uint32_t flags);
extern ctimer_callback_t CTIMER0_callback[];

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
